import java.util.LinkedList;

public class search_Tree {

	node root;

	private node addRecursive(node current, Point location,IMF_member a) {
		String s="";
		if (current == null) {
			
			return new node(a, location, 0, 0, false, 0, null);

		}
			
		if (current.location.x < location.x) {
			// left
			s="left";
			current.transition=s;
			current.left = addRecursive(current.left, (location.setPoint((location.x--), location.y)),current.x);

		} else if (current.location.x > location.x) {
			// right
			s="right";
			current.transition=s;
			current.right = addRecursive(current.right, (location.setPoint((location.x++), location.y)),current.x);

		} else if (current.location.y > location.y) {
			// down
			s="down";
			current.transition=s;
			current.down = addRecursive(current.down, (location.setPoint((location.x), location.y++)),current.x);

		} else if (current.location.y > location.y) {
			// up
			s="up";
			current.transition=s;
			current.up = addRecursive(current.up, (location.setPoint((location.x), location.y--)),current.x);

		}
//		else {
//			//carry no change in location but c is less  
//		}
		// i see that we do not need it here we just visualize to move in the tree

		return current;

	}

	public void add(node n,IMF_member a) {
		root = addRecursive(root, n.location,a);
	}
    static String getSpace (int i)
    {
        String s = "";
        while (i-- > 0)
            s += " ";
        return s;
    }
    static void drawTree(TreeNode root) 
    {
        
        System.out.println("\n\nLevel order traversal of tree:");
        int depth = depth(root);
        setLevels (root, 0);
        
        int depthChildCount[] = new int [depth+1];
        
        
        LinkedList<TreeNode> q = new  LinkedList<TreeNode> ();
        q.add(root.left);
        q.add(root.right);
        
        // draw root first
        root.drawPos = (int)Math.pow(2, depth-1)*H_SPREAD;
        currDrawLevel = root.level;
        currSpaceCount = root.drawPos;
        System.out.print(getSpace(root.drawPos) + root.idata);
        
        while (!q.isEmpty())
        {
            node ele = q.pollFirst();
            drawElement (ele, depthChildCount, depth, q);
            if (ele == null)
                continue;
            q.add(ele.left);
            q.add(ele.right);
        }
        System.out.println();
    }
    
    static int currDrawLevel  = -1;
    static int currSpaceCount = -1;
    static final int H_SPREAD = 3; 
    
	static void drawElement(node ele, int depthChildCount[], int depth, LinkedList<node> q) 
    {
        if (ele == null)
            return;
        
        if (ele.level != currDrawLevel)
        {
            currDrawLevel = ele.level;
            currSpaceCount = 0;
            System.out.println();
            for (int i=0; i<(depth-ele.level+1); i++)
            {
                int drawn = 0;
                if (ele.parent.left != null)
                {
                    drawn = ele.parent.drawPos - 2*i - 2;
                    System.out.print(getSpace(drawn) + "/");
                }
                if (ele.parent.right != null)
                {
                    int drawn2 = ele.parent.drawPos + 2*i + 2;
                    System.out.print(getSpace(drawn2 - drawn) + "\\");
                    drawn = drawn2;
                }
                
                TreeNode doneParent = ele.parent;
                for (TreeNode sibling: q)
                {
                    if (sibling == null)
                        continue;
                    if (sibling.parent == doneParent)
                        continue;
                    doneParent = sibling.parent;
                    if (sibling.parent.left != null)
                    {
                        int drawn2 = sibling.parent.drawPos - 2*i - 2;
                        System.out.print(getSpace(drawn2-drawn-1) + "/");
                        drawn = drawn2;
                    }
                    
                    if (sibling.parent.right != null)
                    {
                        int drawn2 = sibling.parent.drawPos + 2*i + 2;
                        System.out.print(getSpace(drawn2-drawn-1) + "\\");
                        drawn = drawn2;
                    }
                }
                System.out.println();
            }
        }
        int offset=0;
        int numDigits = (int)Math.ceil(Math.log10(ele.idata));
        if (ele.parent.left == ele)
        {
            ele.drawPos = ele.parent.drawPos - H_SPREAD*(depth-currDrawLevel+1);
            //offset = 2;
            offset += numDigits/2;
        }
        else
        {
            ele.drawPos = ele.parent.drawPos + H_SPREAD*(depth-currDrawLevel+1);
            //offset = -2;
            offset -= numDigits;
        }
        
        System.out.print (getSpace(ele.drawPos - currSpaceCount + offset) + ele.idata);
        currSpaceCount = ele.drawPos + numDigits/2;
    }

}
